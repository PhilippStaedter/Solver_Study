#include "amici/symbolic_functions.h"
#include "amici/defines.h"
#include "sundials/sundials_types.h"
#include <cmath>


#include "w.h"
#include "p.h"
#include "k.h"
#include "x.h"
#include "dwdx.h"

void J_fisher1(realtype *J, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *w, const realtype *dwdx){
    J[0] = 3717472118959.1074*dwdx0 + 3717472118959.1074*dwdx1 + 3717472118959.1074*dwdx2 + 3717472118959.1074*dwdx3;
    J[1] = 3717472118959.1074*dwdx6;
    J[2] = 3717472118959.1074*dwdx8;
    J[4] = 3717472118959.1074*dwdx12;
    J[6] = 3717472118959.1074*dwdx16;
    J[8] = 3717472118959.1074*dwdx22;
    J[10] = 3717472118959.1074*dwdx30;
    J[12] = 3717472118959.1074*dwdx36;
    J[14] = -8849557522123.8945*dwdx2;
    J[15] = 8849557522123.8945*dwdx4 - 8849557522123.8945*dwdx5 - 8849557522123.8945*dwdx6 + 8849557522123.8945*dwdx7;
    J[17] = 8849557522123.8945*dwdx10;
    J[19] = 8849557522123.8945*dwdx14;
    J[21] = -8849557522123.8945*dwdx19;
    J[23] = -8849557522123.8945*dwdx26;
    J[25] = 8849557522123.8945*dwdx33;
    J[27] = 8849557522123.8945*dwdx39;
    J[28] = -11152416356877.322*dwdx1;
    J[30] = -11152416356877.322*dwdx8 - 3717472118959.1074*dwdx9;
    J[31] = -3717472118959.1074*dwdx11;
    J[32] = -11152416356877.322*dwdx12;
    J[43] = -26548672566371.684*dwdx4;
    J[44] = 8849557522123.8945*dwdx9;
    J[45] = -26548672566371.684*dwdx10 + 8849557522123.8945*dwdx11;
    J[47] = -26548672566371.684*dwdx14;
    J[56] = -3717472118959.1074*dwdx1;
    J[58] = -3717472118959.1074*dwdx8;
    J[60] = -3717472118959.1074*dwdx12 - 3717472118959.1074*dwdx13;
    J[61] = -3717472118959.1074*dwdx15;
    J[71] = -8849557522123.8945*dwdx4;
    J[73] = -8849557522123.8945*dwdx10;
    J[74] = 8849557522123.8945*dwdx13;
    J[75] = -8849557522123.8945*dwdx14 + 8849557522123.8945*dwdx15;
    J[84] = -3717472118959.1074*dwdx0;
    J[90] = -3717472118959.1074*dwdx16 + 3717472118959.1074*dwdx17 - 3717472118959.1074*dwdx18;
    J[91] = 3717472118959.1074*dwdx21;
    J[92] = -3717472118959.1074*dwdx22;
    J[94] = -3717472118959.1074*dwdx29;
    J[99] = 8849557522123.8945*dwdx5;
    J[104] = -8849557522123.8945*dwdx17;
    J[105] = 8849557522123.8945*dwdx19 - 8849557522123.8945*dwdx20 - 8849557522123.8945*dwdx21;
    J[107] = 8849557522123.8945*dwdx26;
    J[109] = -8849557522123.8945*dwdx32;
    J[112] = 3717472118959.1074*dwdx0;
    J[118] = 3717472118959.1074*dwdx16;
    J[120] = 3717472118959.1074*dwdx22 + 3717472118959.1074*dwdx23 + 3717472118959.1074*dwdx24;
    J[121] = 3717472118959.1074*dwdx27;
    J[124] = 3717472118959.1074*dwdx35;
    J[127] = -8849557522123.8945*dwdx5;
    J[133] = -8849557522123.8945*dwdx19;
    J[134] = -8849557522123.8945*dwdx24;
    J[135] = 8849557522123.8945*dwdx25 - 8849557522123.8945*dwdx26 - 8849557522123.8945*dwdx27;
    J[139] = 8849557522123.8945*dwdx37;
    J[140] = -3717472118959.1074*dwdx3;
    J[146] = 3717472118959.1074*dwdx18;
    J[150] = -3717472118959.1074*dwdx28 + 3717472118959.1074*dwdx29 - 3717472118959.1074*dwdx30;
    J[151] = -3717472118959.1074*dwdx31;
    J[152] = -3717472118959.1074*dwdx36;
    J[155] = -8849557522123.8945*dwdx7;
    J[161] = 8849557522123.8945*dwdx20;
    J[164] = 8849557522123.8945*dwdx28;
    J[165] = 8849557522123.8945*dwdx31 + 8849557522123.8945*dwdx32 - 8849557522123.8945*dwdx33;
    J[167] = -8849557522123.8945*dwdx39;
    J[168] = 3717472118959.1074*dwdx3;
    J[176] = -3717472118959.1074*dwdx23;
    J[178] = 3717472118959.1074*dwdx30;
    J[180] = -3717472118959.1074*dwdx34 - 3717472118959.1074*dwdx35 + 3717472118959.1074*dwdx36;
    J[181] = -3717472118959.1074*dwdx38;
    J[183] = 8849557522123.8945*dwdx7;
    J[191] = -8849557522123.8945*dwdx25;
    J[193] = 8849557522123.8945*dwdx33;
    J[194] = 8849557522123.8945*dwdx34;
    J[195] = -8849557522123.8945*dwdx37 + 8849557522123.8945*dwdx38 + 8849557522123.8945*dwdx39;
}